<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>DRC for ICPS2023_5</description>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>drc_scripts</group-name>
 <menu-path>tools_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>=begin
* Copyright 2023 minimalFab Promoting Organization
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License
=end
# Mineda2022_6 Rule for ICPS SOI CMOS process
## v0.1:  based on Mineda2022_2 ver 0.55
## v0.32 Nov. 7 2024 by S. Moriyama
report("Output database")

### layout/Production Check input(4,0) SOI for Production

soi = input(4, 0)
exclude = input(63, 63)
# Get raw layers
## layout data input
if soi.area == 0 then 
  product = false 
  puts 'Layout DRC Start'
  mask = input(20,0)
  diff    = input(3, 0).not(exclude) - mask 
  tin     = input(5, 0).not(exclude).raw - mask
  cnt1    = input(7, 0).not(exclude) - mask
  ml1    = input(8, 0).not(exclude) - mask
  via1   = input(9, 0).not(exclude) - mask
  ml2    = input(10, 0).not(exclude) - mask
  text   = input(13, 0).not(exclude) - mask
  frame = input(14, 0).not(exclude) - mask
  res    = input(15, 0).not(exclude) - mask
  cap   = input(16, 0).not(exclude) - mask
  dio    = input(17, 0).not(exclude) -  mask
  parea = input(18, 0).not(exclude) - mask
  narea = input(19, 0).not(exclude) - mask
  pad   = input(50, 0).not(exclude) - mask
  cnt = cnt1 - pad

  pdiff  = diff &amp; parea - res 
  ndiff  = diff &amp; narea - res 

  nmos = ndiff &amp; tin 
  pmos = pdiff &amp; tin
  str = 'Diff'
  # tin_gate = tin.interacting(diff) - cap
  tin_gate = tin.interacting(pdiff) + tin.interacting(ndiff) - cap # for Mineda2022_2
  tin_rest = tin - tin_gate 
  bb = (diff + tin_gate ).extents
  tin_gate_enlarged = tin_gate.sized(2.0.um) &amp; bb
  tinA = tin+ tin_gate_enlarged
#  tin_gate_enlarged.output("enlarged TiN")
  
else  # for Product Data input
  product = true
  puts 'PRODUCT DRC Start'
  mask = input(20,0)
  diff    = input(4,0).not(exclude) - mask ## = SOI
  parea = input(2,0).not(exclude) - mask ## = P_plus
  narea = input(3,0).not(exclude) - mask ## = N_plus
  tin     = input(5,0).not(exclude) - mask
  cnt    = input(6,0).not(exclude) - mask
  ml1    = input(7,0).not(exclude) - mask
  via1   = input(8,0).not(exclude) - mask
  ml2    = input(9,0).not(exclude) - mask
  
  pdiff = diff &amp; parea
  ndiff = diff &amp; narea
  
  pmos = diff - parea &amp; tin
#  pmos_a = pmos.edge 
#  pmos_b = pmos.edge  
  nmos = diff - narea &amp; tin
  str = 'SOI'
end

puts 'Check Diffusion' # both layout and product
#layout str='Diff' // process str = 'SOI'
r_diff_w = diff.width(6.0.um) ;r_diff_w.output("(#{str}-A)#{str} width &lt;6")
r_diff_s =  diff.space(4.0.um) ;r_diff_s.output("(#{str}-B)#{str} space &lt;4")
r_parea_diff_en = parea.enclosing(diff,2.0.um);r_parea_diff_en.output("(#{str}-C)Parea enclosing #{str} &lt;2")
r_narea_diff_en = narea.enclosing(diff,2.0.um);r_narea_diff_en.output("(#{str}-D)Narea enclosing #{str} &lt;2")
r_pdiff_ndiff_s = pdiff.separation(ndiff,4.0.um);r_pdiff_ndiff_s.output("(#{str}-E)Pdiff Ndiff  space&lt;4") 
r_parea_narea_and = parea &amp; narea;r_parea_narea_and.output("(#{str}-F)Parea Narea butting")
r_parea_ndiff_s = parea.separation(ndiff,5.0.um);r_parea_ndiff_s.output("(#{str}-G)Parea Ndiff  space&lt;5") 
r_narea_pdiff_s = narea.separation(pdiff,5.0.um);r_narea_pdiff_s.output("(#{str}-H)Narea Pdiff  space&lt;5") 

cnt_via = cnt &amp; tin &amp; ml1 - diff

puts 'Check TiN &amp; Cnt' # both layout and product
unless product
  r_tin_w = tinA.width(6.0.um);r_tin_w.output("(TiN-A)TiN width &lt; 6")
  r_tin_s = tinA.space(4.0.um);r_tin_s.output("(TiN-B)TiN space &lt;4")
  r_tin_cnt_en = tinA.enclosing(cnt,2.0.um);r_tin_cnt_en.output("(TiN-C)TiN enclosing Cnt &lt; 2")
  r_pdiff_tin_ext = tinA.enclosing((pdiff ),4.0.um);r_pdiff_tin_ext.output("(TiN-D)TIN extension Pdiff &lt;4")
  r_ndiff_tin_ext = tinA.enclosing((ndiff ),4.0.um);r_ndiff_tin_ext.output("(TiN-E)TIN extension Ndiff &lt;4")
end
r_cnt_w = cnt.width(4.0.um);r_cnt_w.output("(CNT-G)Cnt width &lt;4")
r_cnt_s = cnt.space(4.0.um);r_cnt_s.output("(CNT-H)Cnt space &lt;4")
r_diff_cnt_en = diff.enclosing(cnt,2.0.um);r_diff_cnt_en.output("(CNT-I)Diff enclosing Cnt &lt;2")
r_cnt_fix = cnt_via.without_perimeter(20.0.um);r_cnt_fix.output("(CNT-J)CNT-Via 5um Fixed size")

m1_via = via1 &amp; ml1 &amp; ml2

puts 'Check Metal/Metal2 &amp; Cont &amp; Via1' #both layout and product
r_ml1_w = ml1.width(6.0.um);r_ml1_w.output("(ML1-A)Ml1 width &lt;6")
r_ml1_s = ml1.space(4.0.um); r_ml1_s.output("(ML1-B)Ml1 space &lt; 4")
r_ml1_cnt_en = ml1.enclosing(cnt,2.0.um);r_ml1_cnt_en.output("(ML1-C)Ml1 enclosing Cnt &lt;2")
r_via1_w = via1.width(4.0.um);r_via1_w.output("(VIA1-D)Via1 width &lt; 4")
r_via1_s = via1.space(4.0.um);r_via1_w.output("(VIA1-E)Via1 space &lt; 4")
r_ml1_via1_en = ml1.enclosing(via1,2.0.um);r_ml1_via1_en.output("(VIA1-F)Ml1 enclosing Via1 &lt; 2")
r_via_fix = m1_via.without_perimeter(20.0.um);r_via_fix.output("(VIA1-G)M1Via 5um Fixed Size")
r_ml2_w = ml2.width(6.0.um);r_ml2_w.output("(ML2-H)Ml2 width &lt; 6")
r_ml2_s = ml2.space(6.um); r_ml2_s.output("(ML2-I)Ml2 space &lt; 6")
r_ml2_via1_en = ml2.enclosing(via1,2.0.um);r_ml2_via1_en.output("(ML2-J)Ml2 enclosing Via1 &lt; 2")

 r_pdiff_s = pdiff.space(5.0.um);r_pdiff_s.output('(PMOS-A)Pdiff space &lt;5')
 r_ndiff_s = ndiff.space(5.0.um);r_ndiff_s.output('(NMOS-D)Ndiff space &lt;5')

if product == true then ## for product
 puts 'Check MOS Structure'
#  r_parea_pdiff_en =parea.enclosing(pdiff,2.0.um);r_parea_pdiff_en.output("(PMOS)Parea enclosing Pdiff &lt;2")
  r_tin_pdiff_en = (tin &amp; pdiff).width(2.0.um);r_tin_pdiff_en.output('(PMOS-B) TiN overlapping Pdiff &lt;2')
#  r_tin_pmos_en = tin.enclosing(pmos,6.0.um);r_tin_pmos_en.output('(PMOS-C)TiN extend PMOS &lt;6')
 # r_narea_ndiff_en =narea.enclosing(ndiff,2.0.um);r_narea_ndiff_en.output("(NMOS)Narea enclosing Ndiff &lt;2")
  r_tin_ndiff_en = (tin &amp; ndiff).width(2.0.um);r_tin_ndiff_en.output('(NMOS-E) TiN overlapping Ndiff &lt;2')
#  r_tin_nmos_en = tin.enclosing(nmos,6.0.um);r_tin_nmos_en.output('(NMOS-F)TiN extend NMOS &lt;6')
end

puts "DRC Finished"

#puts 'Check stand-alone Cont/Via'
#sacnt = cnt.outside(dmcnt)
#sacnt.output("Stand alone Cont")
# SAvia1 = geomAnd(VIA1, geomNot(DM_via1)) =&gt;
</text>
</klayout-macro>
